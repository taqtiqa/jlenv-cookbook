# frozen_string_literal: true

title 'Jlenv System Install Resource'

# Default user in resources is jovyan i.e. Jupyter assumption
julia_users          ||= yaml(content: inspec.profile.file('users.yml'))['users']
julia_user           ||= 'vagrant' 
global_julia_version ||= julia_users[julia_user]['version']

jlenv_global = command("sudo -H -u #{julia_user} bash -c 'source /etc/profile.d/jlenv.sh && jlenv global'")

# frozen_string_literal: true

control 'Jlenv system install' do
  title 'Jlenv should be installed system wide'

  desc 'Jlenv should be installed and run successfully'
  describe bash('source /etc/profile.d/jlenv.sh && jlenv versions --bare') do
    its('exit_status') { should eq 0 }
  end
end

control 'Jlenv system path' do
  title 'Jlenv should be installed in the system wide location'

  describe file('/usr/local/jlenv') do
    it { should exist }
    it { should be_directory }
  end

  # Issue: https://github.com/jlenv/jlenv-cookbook/issues/3
  # Issue: https://github.com/jlenv/jlenv-cookbook/issues/4
  # 
  describe file('/etc/profile.d/jlenv.sh') do
    its('type')  { should eq :file }
    its('group') { should eq 'root' }
    its('owner') { should eq 'root' }
    its('mode')  { should cmp '0755' }
    it { should     be_executable.by('others') }
    it { should_not be_writable.by('others') }
  end

end

control 'Global Installations' do
  impact 0.6
  title 'Jlenv should be installed under the .... directory.'
  desc  'Always specify environment variables, folders and permissions.'
  desc  'Rationale:', 'This ensures that there are no unexpected scripts run.' # Requires InSpec >=2.3.4
  tag   'julia', 'jlenv'
  #ref   'NSA-RH6-STIG - Section 3.5.2.1', url: 'https://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf'

  # before :all do
  #   command("sudo -H -u #{julia_user} bash -c 'source /etc/profile.d/jlenv.sh && jlenv global'")
  # end

  # The following nested describe is blocked by inspec issue #630:
  #
  #
  # Workarounds not yet known.  
  # Best practice to audit os_env(...) generated by user scripts not known.
  #
  # describe jlenv_global do
  #   env_vars = %w(
  #     HOME
  #     PATH
  #     )
  # 
  #   env_vars.each do |e|
  #     describe os_env(e) do
  #       its('content') { should_not eq nil }
  #       its('content') { should_not eq '' }
  #       its('split'){ should_not eq '' }
  #       its('split'){ should_not eq '.' }
  #     end
  #   end
  # end
  
  describe bash('source /etc/profile.d/jlenv.sh && jlenv versions --bare') do
    its('exit_status') { should eq 0 }
    its('stdout') { should include(global_julia_version ) }
  end

  describe jlenv_global do
    its('exit_status') { should eq 0 }
    its('stdout') { should include('system') }
    its('stdout') { should_not include(global_julia_version ) }
    its('stderr') { should eq '' }
  end

  %w(plugins shims versions).each do |d|
    describe directory("/home/#{julia_user}/.jlenv/#{d}") do
      its('type') { should eq :directory }
      its('mode') { should cmp '0755' }
      it { should be_writable.by_user(julia_user) }
    end
  end

  # Issue: https://github.com/jlenv/jlenv-cookbook/issues/3
  # Refactor this control to verify the user install script has had no
  # (unintended/specified) side effect on the system install (and vice versa).
  describe file('/etc/profile.d/jlenv.sh') do
    it { should_not be_writable.by_user(julia_user) }
    it { should be_executable.by('others') }
    it { should be_executable.by_user(julia_user) }
  end

  describe directory("/home/#{julia_user}/.jlenv/.git") do
    its('type') { should eq :directory }
    its('mode') { should cmp '0755' }
    it { should be_writable.by_user(julia_user) }
  end

  describe os_env('PATH', 'target') do
    its('split') { should_not include('') }
    its('split') { should_not include('.') }
    its('split') { should include("/home/#{julia_user}/.jlenv/shims") }
  end
end

control 'Global Installations' do
  title 'Jlenv should be installed globally'

  desc "Can set global Julia version toglobal}"
  jlenv_versions = command("sudo -H -u #{julia_user} bash -c 'source /etc/profile.d/jlenv.sh && jlenv versions --bare'")
  describe jlenv_versions do
    its('exit_status') { should eq 0 }
    its('stdout') { should_not include(global_julia_version) }
    its('stderr') { should eq '' }
  end

  jlenv_env_vars = %w(
    JLENV_DEBUG
    JLENV_DIR
    JLENV_HOOK_PATH
    JLENV_ROOT
    JLENV_VERSION
  )

  jlenv_env_vars.each do |e|
    describe os_env(e) do
      its('content') { should eq nil }
      its('content') { should_not eq '' }
      its('split'){ should_not eq '' }
      its('split'){ should_not eq '.' }
    end
  end
end
